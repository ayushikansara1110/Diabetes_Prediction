# -*- coding: utf-8 -*-
"""Diabetes prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TCkJ2EVO6GG2RGI9EZUNyd51maZ82ODo
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

"""Steps:
1. put saara data in a pandas DataFrame
2. '.value_counts' se find number of instances of each outcome
3. separate outcome wali column and other parameters using .drop and axis = 1 for column removal UwU
4. "train_test_split(x, y, test_size = 0.1, stratify = y, random_state = 2)" use to split datapoints into testing and training values
5. put LogisticRegression() inside model variable
6. use 'model.fit(training_datapoints)' to train your model
7. model.predict(training data) to get your training data prediction and use accuracy_score(prediction, output) to get an accuracy score for your predicition
8. for a single datapoint-

     input_data = ( idhar bhar do )

     convert to numpy array using np.asarray(input_data)

     reshape into (1, -1)

     use .predict to get prediction

"""

data = pd.read_csv('/content/diabetes.csv')

data.head()

data.shape

data.value_counts('Outcome')

x = data.drop(columns = 'Outcome', axis = 1)
x.head()

y = data['Outcome']
print(y)

xTrain, xTest, yTrain, yTest = train_test_split(x, y, stratify = y, test_size = 0.2, random_state = 1)

print(x.shape, xTrain.shape, xTest.shape)

print(y.shape, yTrain.shape, yTest.shape)

model = LogisticRegression()

model.fit(xTrain, yTrain)

# accuracy on training data
prediction1 = model.predict(xTrain)
TrainAccuracy = accuracy_score(prediction1, yTrain)
print(TrainAccuracy)

prediction2 = model.predict(xTest)
TestAccuracy = accuracy_score(prediction2, yTest)
print(TestAccuracy)

input_data = (1,88,78,29,76,32,0.365,29)

np_array = np.asarray(input_data)
input = np_array.reshape(1, -1)

prediction = model.predict(input)
print(prediction)

input_data = (8,186,90,35,225,34.5,0.423,37)

np_array = np.asarray(input_data)
input = np_array.reshape(1, -1)

prediction = model.predict(input)
print(prediction)

input_data = (0, 190, 95, 0, 0, 0, 49.5, 47)
np_array = np.asarray(input_data)
input = np_array.reshape(1, -1)
prediction = model.predict(input)
print(prediction)